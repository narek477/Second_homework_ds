1

#include <iostream>
#include <vector>


void createAndFillVector(int N) {
    std::vector<int> vec(N);
    for(int i = 0; i < N; i++){
        vec[i] = i + 1;
    }
    
    for(int i = 0; i < N; i++){
        std::cout << vec[i] << " ";
    }
    std::cout << std::endl << "Current size is " << vec.size() << std::endl;
    std::cout << "Current capacity is " << vec.capacity() << std::endl;
}


int main() {
    createAndFillVector(5);
    createAndFillVector(10);
    
}

2

#include <iostream>
#include <vector>

void workWithEmptyVector() {
    std::vector<int> vec;
    for(int i = 0; i < 10; i++){
        vec.push_back(i + 1);
        std::cout << "Curr size is " << vec.size() << std::endl;
        std::cout << "Curr capacity is " << vec.capacity() << std::endl;
    }
    
    for(int i = 0; i < 10; i++){
        std::cout << vec[i] << " ";
    }
    std::cout << std::endl;
}


int main() {
    
    workWithEmptyVector();
}

3

#include <iostream>
#include <vector>

std::vector<int> createVectorFromInput() {
    std::vector<int> vec;
    int value;
    while(value != 0) {
        std::cin >> value;
        if(value != 0){
            vec.push_back(value);
        }
    }
    
    return vec;
}


int main() {
    std::vector<int> inputVec = createVectorFromInput();
    
    for(int i = 0; i < inputVec.size(); i++){
        std::cout << inputVec[i] << " ";
    }
    
    
}


4

#include <iostream>
#include <vector>

int removeElementsGreaterThan(std::vector<int>& vec, int border){
    int count = 0;
    for(int i = vec.size(); i >=0; i--){
        if(vec[i] > border){
            vec.pop_back();
            count++;
        }
    }
    return count;
}


int main() {
    std::vector<int> v = {1, 3, 5, 7, 9};
    int removed = removeElementsGreaterThan(v, 5);
    std::cout << removed;
    
}

5

#include <iostream>
#include <vector>

void manageCapacity(std::vector<int>& vec){
    std::cout << "The start size is " << vec.size() << std::endl;
    std::cout << "The start capacity is " << vec.capacity() << std::endl;
    
    vec.reserve(500);
    for(int i = 1; i <= 500; i++) {
        vec.push_back(i);
    }
    
    std::cout << "Changed size is " << vec.size() << std::endl;
    std::cout << "Changed capacity is " << vec.capacity() << std::endl;
    
}

int main() {
    std::vector<int> v(3);
    manageCapacity(v);
}

6

#include <iostream>
#include <vector>

template<typename T>
void resizeVector(std::vector<T>& vec, int new_size, const T value){
    std::cout << "Vector before changing the size: " << std::endl;
    for(int i = 0; i < vec.size(); i++){
        std::cout << vec[i] << " ";
    }
    std::cout << std::endl;
    
    if(new_size > vec.size()) {
        vec.reserve(new_size - vec.size() + 1);
        for(int i = 0; i < new_size - vec.size() + 1; i++){
            vec.push_back(value);
        }
    }
    
    std::cout << "vector after changing the size: " << std::endl;
    for(int i = 0; i < vec.size(); i++){
        std::cout << vec[i] << " ";
    }
    std::cout << std::endl << vec.size() << " " << vec.capacity() << std::endl;
    
}

int main() {
    std::vector<int> v = {1, 2, 3};
    resizeVector(v, 5, 42);

}

7

#include <iostream>
#include <vector>

std::vector<int> mergeSortedVectors(std::vector<int>& v1, std::vector<int>& v2){
   std::vector<int> v;
   v.reserve(v1.size() + v2.size());
   
   int i = 0, j = 0;
   
   while(i < v1.size() && j < v2.size()) {
       if(v1[i] <= v2[j]) {
           v.push_back(v1[i]);
           ++i;
       } else {
           v.push_back(v2[j]);
           ++j;
       }
       
   }
   
   while(i < v1.size()) {
       v.push_back(v1[i]);
       ++i;
   }
   
   while(j < v2.size()) {
       v.push_back(v2[j]);
       ++j;
   }
   
   return v;
}

int main() {
    std::vector<int> vec1 = {1, 3, 5, 7};
    std::vector<int> vec2 = {2, 4, 6, 8, 9};
    std::vector<int> merged = mergeSortedVectors(vec1, vec2);
    
    for(int i = 0; i < merged.size(); i++){
        std::cout << merged[i] << " ";
    }
    
}
