1

#include <iostream>
#include <vector>


void createAndFillVector(int N) {
    std::vector<int> vec(N);
    for(int i = 0; i < N; i++){
        vec[i] = i + 1;
    }
    
    for(int i = 0; i < N; i++){
        std::cout << vec[i] << " ";
    }
    std::cout << std::endl << "Current size is " << vec.size() << std::endl;
    std::cout << "Current capacity is " << vec.capacity() << std::endl;
}


int main() {
    createAndFillVector(5);
    createAndFillVector(10);
    
}

2

#include <iostream>
#include <vector>

void workWithEmptyVector() {
    std::vector<int> vec;
    for(int i = 0; i < 10; i++){
        vec.push_back(i + 1);
        std::cout << "Curr size is " << vec.size() << std::endl;
        std::cout << "Curr capacity is " << vec.capacity() << std::endl;
    }
    
    for(int i = 0; i < 10; i++){
        std::cout << vec[i] << " ";
    }
    std::cout << std::endl;
}


int main() {
    
    workWithEmptyVector();
}

3

#include <iostream>
#include <vector>

std::vector<int> createVectorFromInput() {
    std::vector<int> vec;
    int value;
    while(value != 0) {
        std::cin >> value;
        if(value != 0){
            vec.push_back(value);
        }
    }
    
    return vec;
}


int main() {
    std::vector<int> inputVec = createVectorFromInput();
    
    for(int i = 0; i < inputVec.size(); i++){
        std::cout << inputVec[i] << " ";
    }
    
    
}


4

#include <iostream>
#include <vector>

int removeElementsGreaterThan(std::vector<int>& vec, int border){
    int count = 0;
    for(int i = vec.size(); i >=0; i--){
        if(vec[i] > border){
            vec.pop_back();
            count++;
        }
    }
    return count;
}


int main() {
    std::vector<int> v = {1, 3, 5, 7, 9};
    int removed = removeElementsGreaterThan(v, 5);
    std::cout << removed;
    
}

5

#include <iostream>
#include <vector>

void manageCapacity(std::vector<int>& vec){
    std::cout << "The start size is " << vec.size() << std::endl;
    std::cout << "The start capacity is " << vec.capacity() << std::endl;
    
    vec.reserve(500);
    for(int i = 1; i <= 500; i++) {
        vec.push_back(i);
    }
    
    std::cout << "Changed size is " << vec.size() << std::endl;
    std::cout << "Changed capacity is " << vec.capacity() << std::endl;
    
}

int main() {
    std::vector<int> v(3);
    manageCapacity(v);
}

6

#include <iostream>
#include <vector>

template<typename T>
void resizeVector(std::vector<T>& vec, int new_size, const T value){
    std::cout << "Vector before changing the size: " << std::endl;
    for(int i = 0; i < vec.size(); i++){
        std::cout << vec[i] << " ";
    }
    std::cout << std::endl;
    
    if(new_size > vec.size()) {
        vec.reserve(new_size - vec.size() + 1);
        for(int i = 0; i < new_size - vec.size() + 1; i++){
            vec.push_back(value);
        }
    }
    
    std::cout << "vector after changing the size: " << std::endl;
    for(int i = 0; i < vec.size(); i++){
        std::cout << vec[i] << " ";
    }
    std::cout << std::endl << vec.size() << " " << vec.capacity() << std::endl;
    
}

int main() {
    std::vector<int> v = {1, 2, 3};
    resizeVector(v, 5, 42);

}

7

#include <iostream>
#include <vector>

std::vector<int> mergeSortedVectors(std::vector<int>& v1, std::vector<int>& v2){
   std::vector<int> v;
   v.reserve(v1.size() + v2.size());
   
   int i = 0, j = 0;
   
   while(i < v1.size() && j < v2.size()) {
       if(v1[i] <= v2[j]) {
           v.push_back(v1[i]);
           ++i;
       } else {
           v.push_back(v2[j]);
           ++j;
       }
       
   }
   
   while(i < v1.size()) {
       v.push_back(v1[i]);
       ++i;
   }
   
   while(j < v2.size()) {
       v.push_back(v2[j]);
       ++j;
   }
   
   return v;
}

int main() {
    std::vector<int> vec1 = {1, 3, 5, 7};
    std::vector<int> vec2 = {2, 4, 6, 8, 9};
    std::vector<int> merged = mergeSortedVectors(vec1, vec2);
    
    for(int i = 0; i < merged.size(); i++){
        std::cout << merged[i] << " ";
    }
    
}

8

#include <iostream>
#include <vector>

int findSubsequence(std::vector<int>& man, std::vector<int>& sub){
    if(man.size() < sub.size()) {
        return -1;
    }
    
    if(sub.empty()) {
        return -1;
    }
    
    for(int i = 0; i < man.size() - sub.size(); i++){
        bool found = true;
        for(int j = 0; j < sub.size(); j++){
            if(man[i + j] != sub[j]){
                found = false;
                break;
            }
        }
        
        if(found){
            return i;
        }
    }
    return -1;
}

int main() {
    std::vector<int> main_vec = {1, 2, 3, 4, 5, 6};
    std::vector<int> sub_vec = {3, 4, 5};
    int index = findSubsequence(main_vec, sub_vec);
    std::cout << index << std::endl;
    
}

9

#include <iostream>
#include <vector>

std::vector<std::vector<int>> groupAdjacent(std::vector<int>& vec) {
    std::vector<std::vector<int>> result;
    
    std::vector<int> current = {vec[0]};
    
    for(int i = 1; i < vec.size(); i++){
        if(vec[i] == vec[i - 1]){
            current.push_back(vec[i]);
        } else {
            result.push_back(current);
            current = {vec[i]};
        }
    }
    result.push_back(current);
    return result;
}

int main() {
    std::vector<int> vec = {1, 1, 2, 2, 2, 3, 1, 1};
    std::vector<std::vector<int>> groups = groupAdjacent(vec);
    printgroups(groups);
}

10

#include <iostream>
#include <vector>

template<typename T, typename Func>
std::vector<T> filterVector(std::vector<T>& vec, Func func){
    std::vector<T> res;
    
    for(int i = 0; i < vec.size(); i++){
        if(func(vec[i])){
            res.push_back(vec[i]);
        }
    }
    
    return res;
}

bool isEven(int x) { return x % 2 == 0; }

int main() {
    std::vector<int> vec = {1, 2, 3, 4, 5, 6};
    std::vector<int> filtered = filterVector(vec, isEven);
    for(int i = 0; i < filtered.size(); i++){
        std::cout << filtered[i] << " ";
    }
}

11

#include <iostream>
#include <vector>
#include <stdexcept>

class DynamicMatrix {
    
private:
    std::vector<std::vector<int>> matrix;
    int rows;
    int cols;
    
public:
    DynamicMatrix(int rows, int cols): rows(rows), cols(cols) {
        matrix.resize(rows);
        for(int i = 0; i < rows; i++){
            matrix[i].resize(cols, 0);
        }
    }
    
    int getElement(int row, int col){
        if (row >= rows || col >= cols || row < 0 || col < 0) {
            throw std::out_of_range("Matrix indices out of range");
        }
        return matrix[row][col];
    }
    
    void setElement(int row, int col, int value){
        if (row >= rows || col >= cols || row < 0 || col < 0) {
            throw std::out_of_range("Matrix indices out of range");
        }
        matrix[row][col] = value;
    }
    
    void addRow() {
        matrix.push_back(std::vector<int>(cols, 0));
        rows++;
    }
    
    void addColumn() {
        for(int i = 0; i < rows; i++){
            matrix[i].push_back(0);
        }
        cols++;
    }
    
    void print() const {
        for(int i = 0; i < rows; i++){
            for(int j = 0; j < cols; j++){
                std::cout << matrix[i][j];
                if(j < cols - 1) {
                    std::cout << " ";
                }
                
            }
            std::cout << std::endl;
        }
        
    }
    
    
};

int main() {
    DynamicMatrix matrix(3, 3);
    matrix.setElement(1, 1, 42);
    matrix.addRow();
    matrix.addColumn();
    matrix.print();
}

12

#include <iostream>
#include <vector>
#include <stdexcept>

std::vector<int> findIntersection(std::vector<int>& v1, std::vector<int>& v2){
    std::vector<int> res;
    
    for(int i = 0; i < v1.size(); i++){
        bool foundinv2 = false;
        for(int j = 0; j < v2.size(); j++){
            if(v1[i] == v2[j]){
                foundinv2 = true;
                break;
            }
        }
        
        bool added = false;
        for(int k = 0; k < res.size(); k++){
            if(res[k] == v1[i]){
                added = true;
                break;
            }
        }
        
        if(foundinv2 && !added){
            res.push_back(v1[i]);
        }
    }
    return res;
}

int main() {
    std::vector<int> a = {1, 2, 3, 4};
    std::vector<int> b = {3, 4, 5, 6};
    std::vector<int> inter = findIntersection(a, b);
    for(int i = 0; i < inter.size(); i++){
       std::cout << inter[i] << " "; 
    }
}

