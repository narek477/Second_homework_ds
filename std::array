1

#include <iostream>
#include <array>

std::array<int, 5> createArray() {
    std::array<int, 5> arr;
    for(int i = 0; i < arr.size(); i++){
        arr[i] = i + 1;
    }
    return arr;
}


int main() {
    std::array<int, 5> arr = createArray();
    for(int i = 0; i < arr.size(); i++){
        std::cout << arr[i] << " "; 
    }
    
}

2


#include <iostream>
#include <array>

void fillArray(std::array<int, 7>& arr, int val) {
    for(int i = 0; i < arr.size(); i++){
        arr[i] = val;
    }
}

int main() {
    std::array<int, 7> arr;
    fillArray(arr, 21);
    for(int i = 0; i < arr.size(); i++){
        std::cout << arr[i] << " ";
    }
    
}


3

#include <iostream>
#include <array>


template<int N>
int countEven(std::array<int, N> arr) {
    int count = 0;
    for(int i = 0; i < arr.size(); i++){
        if(arr[i] % 2 == 0){
            count++;
        }
    }
    
    return count;
}

int main() {
    std::array<int, 5> arr = {1, 4, 6 ,8, 3};
    int count = countEven<5>(arr);
    std::cout << count << std::endl;
    
}


4

#include <iostream>
#include <array>


template<typename T, int N>
int findElement(std::array<T, N>& arr, T val){
    
    for(int i = 0; i < arr.size(); i++){
        if(arr[i] == val){
            return i;
        }
    }
    return -1;
}


int main() {
    std::array<int, 4> arr = {1, 2, 3, 2};
    int eli = findElement<int, 4>(arr, 2);
    std::cout << eli << std::endl;
    
    
}


5

#include <iostream>
#include <array>


template<typename T, int N>
void reverseArray(std::array<T, N>& arr){
    for(int i = 0; i < arr.size() / 2; i++) {
       std::swap(arr[i], arr[arr.size() - 1 - i]);
    }
}


int main() {
   std::array<int, 5> arr = {1, 2, 3, 4, 5};
   reverseArray<int, 5>(arr);
   for(int i = 0; i < arr.size(); i++){
       std::cout << arr[i] << " ";
   }
   
}

6

#include <iostream>
#include <array>

template<typename T, int N>
bool compareArrays(std::array<T, N>& arr, std::array<T, N>& brr){
    for(int i = 0; i < N; i++){
        if(arr[i] != brr[i]){
            return false;
        }
    }
    return true;
}


int main() {
   std::array<int, 5> arr = {1, 2, 3, 4, 5};
   std::array<int, 5> brr = {1, 2, 3, 4, 5};
   std::cout << compareArrays<int, 5>(arr, brr) << std::endl;
   
   std::array<double, 3> crr = {2.3, 4.5, 2.1};
   std::array<double, 3> drr = {2.3, 4.5, 1.8};
   std::cout << compareArrays<double, 3>(crr, drr) << std::endl;
   
   
}

7

#include <iostream>
#include <array>
#include <stdexcept>

template<typename T, size_t N, size_t M>
std::array<T, M> copySubArray(std::array<T, N>& arr, int start_index, int count){
    if(start_index + count > N  || start_index >= N || count > N){
        throw std::out_of_range("Invalid startindex or count");
    }
    
    std::array<T, M> res;
    for(int i = 0; i < count; i++){
        res[i] = arr[start_index + i];
    }
    return res;
}


int main() {
    try{
        
        std::array<int, 10> source = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        auto sub = copySubArray<int, 10, 5>(source, 2, 5);
        for(int i = 0; i < sub.size(); i++){
            std::cout << sub[i] << " ";
        }
        
    } catch (const std::exception& e) {
        std::cerr << "Error" << e.what() << std::endl;
    }    
    
    return 0;
}

8

#include <iostream>
#include <array>

class Matrix3x3 {
    
private:
    std::array<std::array<int, 3>, 3> arr;
    
public:

    Matrix3x3(int a11, int a12, int a13,
              int a21, int a22, int a23,
              int a31, int a32, int a33){
        arr[0][0] = a11; arr[0][1] = a12; arr[0][2] = a13;
        arr[1][0] = a21; arr[1][1] = a22; arr[1][2] = a23;
        arr[2][0] = a31; arr[2][1] = a32; arr[2][2] = a33;
    }
    
    int getElement(int row,int col) const {
        return arr[row][col];
    }
    
    void setElement(int row, int col, int value) {
        arr[row][col] = value;
    }
    
    void transpose() {
        for(int i = 0; i < 3; i++){
            for(int j = i + 1; j < 3; j++){
                std::swap(arr[i][j], arr[j][i]);
            }
        }
    }
    
    void print() {
        for(int i = 0; i < 3; i++){
            for(int j = 0; j < 3; j++){
                std::cout << arr[i][j] << " ";
            }
            std::cout << '\n';
        }
    }
};


int main() {
    Matrix3x3 matrix(1, 2, 3, 4, 5, 6, 7, 8, 9);
    matrix.print();
    std::cout << std::endl;
    matrix.transpose();
    matrix.print();
    
}

9

#include <iostream>
#include <array>

template<typename T, int N>
void shiftLeft(std::array<T, N>& arr, int count){
    
    if(count == 0) {
        return;
    }
    
    std::array<T, N> temp;
    
    for(int i = 0; i < count; i++){
        temp[i] = arr[i];
    }
    
    for(int i = 0; i < arr.size() - count; i++){
        arr[i] = arr[i + count];
    }
    
    for(int i = 0; i < count; i++){
        arr[arr.size() - count + i] = temp[i];
    }
    
}


int main() {
    std::array<int, 5> arr = {1, 2, 3, 4, 5};
    shiftLeft<int, 5>(arr, 2);
    
    for(int i = 0; i < 5; i++){
        std::cout << arr[i] << ' ';
    }
    
}

10

#include <iostream>
#include <array>


template<typename T, int Cols, int Rows, typename Func>
std::array<std::array<T, Cols>, Rows> process2DArray(std::array<std::array<T, Cols>, Rows> arr, Func func){
    for(int i = 0; i < Rows; i++){
        for(int j = 0; j < Cols; j++){
            arr[i][j] = func(arr[i][j]);
        }
    }
    
    return arr;
}

int doubler(int x) {
    return x * 2;
}

std::array<std::array<int, 3>, 3> matrix = {{
    {{1, 2, 3}},
    {{4, 5, 6}},
    {{7, 8, 9}}
}};


int main() {
    auto doubled = process2DArray<int, 3, 3>(matrix, doubler);
    for(int i = 0; i < 3; i++){
        for(int j = 0; j < 3; j++){
            std::cout << doubled[i][j] << " ";
        }
        std::cout << std::endl;
    }
    
    
}


11


#include <iostream>
#include <array>

template<typename T, int N>
bool validateArray(std::array<T, N>& arr, T min, T max){
    for(int i = 0; i < arr.size(); i++){
        if(!(arr[i] <= max && arr[i] >=min)){
            return false;
        }
    }
    return true;
}


int main() {
    std::array<int, 4> scores = {85, 92, 78, 100};
    bool valid = validateArray<int, 4>(scores, 0, 100);
    std::cout << valid;
}

12

#include <iostream>
#include <array>

template<int N>
std::array<int, 256> countFrequency(const std::array<char, N>& arr) {
    std::array<int, 256> freq = {};
    
    for(int i = 0; i < N; i++){
        char c = arr[i];
        freq[c]++;
    }
    return freq;
}


int main() {
    std::array<char, 5> text = {'h', 'e', 'l', 'l', 'o'};
    auto freq = countFrequency<5>(text);
  
   std::cout << freq['h'] << " " << freq['l'] << std::endl;
    
}
